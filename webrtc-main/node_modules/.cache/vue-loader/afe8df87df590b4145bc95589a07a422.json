{"remainingRequest":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/koolearn/Downloads/webrtc-demo/webrtc-main/src/views/Room.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/src/views/Room.vue","mtime":1623844934914},{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport socket from '../utils/socket';\nimport { Palette } from '../utils/palette';\nexport default {\n  name: 'palette',\n  data() {\n    return {\n        loading: false,\n        loadingText: '呼叫中',\n        roomid: 'palette',\n        isJoin: false,\n        account: window.sessionStorage.account || '',\n        isToPeer: false, // 是否立即建立P2P连接\n        // roomid:  window.sessionStorage.roomid || '',\n        userList: [],\n        isCall: false,\n        peer: null, \n        offerOption: {\n           offerToReceiveAudio: 1,\n           offerToReceiveVideo: 1 \n        },\n        handleList: [\n            {name: '圆', type: 'arc'},\n            {name: '线条', type: 'line'},\n            {name: '矩形', type: 'rect'},\n            {name: '多边形', type: 'polygon'},\n            {name: '橡皮擦', type: 'eraser'},\n            {name: '撤回', type: 'cancel'},\n            {name: '前进', type: 'go'},\n            {name: '清屏', type: 'clear'},\n            {name: '线宽', type: 'lineWidth'},\n            {name: '颜色', type: 'color'}\n        ],\n        color: 'rgba(19, 206, 102, 1)',\n        currHandle: 'line',\n        lineWidth: 5,\n        palette: null, // 画板\n        allowCancel: true,\n        allowGo: true,\n        sides: 3,\n        channel: null,\n        messageList: [],\n        sendText: ''\n    }\n  },\n  mounted() {\n      this.initSocket();\n      if(this.account){\n        this.join();\n      }\n  },\n  methods: {\n      sidesChange() {\n          this.palette.changeWay({sides: this.sides})\n      },\n      lineWidthChange() {\n        this.palette.changeWay({lineWidth: this.lineWidth})\n      },\n      initPalette(){\n          this.palette = new Palette(this.$refs['canvas'], {\n              drawColor: this.color,\n              drawType: this.currHandle,\n              lineWidth: this.lineWidth,\n              allowCallback: this.allowCallback,\n              moveCallback: this.moveCallback\n          })\n      },\n      handleClick(v){\n          if(['cancel', 'go', 'clear'].includes(v.type)){\n              this.moveCallback(v.type);\n              this.palette[v.type]();\n              return;\n          }\n          this.palette.changeWay({type: v.type});\n          if(['color', 'lineWidth'].includes(v.type)) return;\n          this.currHandle = v.type;\n      },\n      allowCallback(cancel, go) {\n          this.allowCancel = !cancel;\n          this.allowGo = !go\n      },\n      moveCallback(...arr){\n          this.send(arr)\n      },\n      formatTime(date) {\n          const hour = date.getHours();\n          const minute = date.getMinutes();\n          const second = date.getSeconds();\n          return [hour, minute, second].map(this.formatNumber).join(':')\n      },\n      formatNumber(n){\n        n = n.toString();\n        return n[1] ? n : '0' + n  \n      },\n      send(arr){\n          if(arr[0] === 'text'){\n              let params = {account: this.account, time: this.formatTime(new Date()), mes: this.sendText, type: 'text'};\n              this.channel.send(JSON.stringify(params));\n              this.messageList.push(params);\n              this.sendText = '';\n          } else {\n              this.channel.send(JSON.stringify(arr));\n          }\n      },\n      colorChange() {\n          this.palette.changeWay({color: this.color})\n      },\n      initSocket() {\n        socket.on('joined', data => {\n            console.log(data, 'data')\n            this.userList = data;\n        })\n        socket.on('reply', async(data) => {\n            this.loading = false;\n            switch (data.type) {\n                case '1': // 同意\n                    this.isCall = data.self;\n                    // 对方同意后创建自己的peer\n                    await this.createP2P(data);\n                    // 建立dataChannel\n                    await this.createDataChannel(data);\n                    // 给对方发送offer\n                    this.createOffer(data);\n                    break;\n                case '2': // 拒绝\n                    this.$message({\n                        message: '对方拒绝了你的请求',\n                        type: 'warning'\n                    })\n                    break;\n                case '3': // 正在通话中\n                    this.$message({\n                        message: '对方正在通话中方！',\n                        type: 'warning'\n                    })\n                    break;\n            }\n        })\n        socket.on('1v1ICE', (data) =>{ // 接收到 ICE\n            this.onIce(data);\n        });\n        socket.on('apply', data => {\n            if(this.isCall){\n                this.reply(data.self, '3');\n                return;\n            }\n            this.$confirm(data.self + '向你请求视频通话，是否同意？', '提示', {\n                confirmButtonText: '同意',\n                cancelButtonText: '拒绝',\n                type: 'warning'\n            }).then(async () => {\n                await this.createP2P(data);\n                await this.onDataChannel();\n                this.isCall = data.self;\n                this.reply(data.self, '1')\n            }).catch(() => {\n                this.reply(data.self, '2')\n            })\n        });\n        socket.on('1v1offer', data => {\n            this.onOffer(data)\n        })\n        socket.on('1v1answer', data => { // 接受到anser\n            this.onAnswer(data)\n        })\n      },\n      async onAnswer(data) {\n          try{\n              await this.peer.setRemoteDescription(data.sdp)\n          }catch(e){\n              console.log('onAnswer：', e)\n          }\n      },\n      async onOffer(data) { // 接收offer并发送方answer\n        try{\n            // 接收端设置远程offer描述\n            await this.peer.setRemoteDescription(data.sdp);\n            // 接收端创建answer\n            let answer = await this.peer.createAnswer();\n            // 接收端设置本地answer描述\n            await this.peer.setLocalDescription(answer);\n            // 给对方发送answer\n            socket.emit('1v1answer', {account: data.self, self: this.account, sdp: answer})\n        }catch(e){\n            console.log('onOffer： ', e)\n        }\n          \n      },\n      \n      async createOffer(data) {\n          try{\n              // 创建offer\n              let offer = await this.peer.createOffer(this.offerOption);\n              // 呼叫端设置本地offer描述\n              await this.peer.setLocalDescription(offer);\n              //给对方发送offer\n              socket.emit('1v1offer', {\n                  account: data.self,\n                  self: this.account, \n                  sdp: offer\n              })\n          }catch(e){\n              console.log('createoffer: ', e)\n          }\n      },\n\n      initPeer(data){\n          // 创建输出端PeerConnection\n          let PeerConnection =window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection;\n          this.peer = new PeerConnection();\n          this.peer.onicecandidate = (event) => {\n              if(event.candidate) {\n                  socket.emit('1v1ICE', {account: data.self, self: this.account, sdp: event.candidate});\n              }\n          }\n      },\n        async onIce(data) { // 接收ICE候选\n            try{\n                await this.peer.addIceCandidate(data.sdp); // 设置远程ICE\n            }catch(e){\n                console.log('onAnswer: ', e)\n            }\n        },\n      async createP2P(data) {\n          this.loading = true;\n          this.loadingtext = '正在建立通话连接';\n          await this.initPeer(data); // 获取到媒体流后，调用函数初始化RTCPeerConnection\n      },\n      reply(account, type){\n          socket.emit('reply', {account: account, self: this.account, type: type})\n      },\n      createDataChannel() {\n          try{\n              this.channel = this.peer.createDataChannel('messagechannel');\n              this.handleChannel(this.channel);\n          }catch(e){\n              console.log('createChannel：',e)\n          }\n      },\n      onDataChannel() {\n          this.peer.ondatachannel = (event) => {\n              this.channel = event.channel;\n              this.handleChannel(this.channel);\n          }\n      },\n      handleChannel(channel) {\n          channel.binaryType = 'arraybuffer';\n          channel.onopen = (event) => {\n              console.log('channel onopen', event)\n              this.isToPeer = true;\n              this.loading = false;\n              this.initPalette();\n          }\n          channel.onclose = function(event){\n              console.log('channel onclose', event);\n          }\n          channel.onmessage = (e) => {\n              if(Array.isArray(JSON.parse(e.data))){\n                  let [type, ...arr] = JSON.parse(e.data);\n                  this.palette[type](...arr);\n              } else {\n                  this.messageList.push(JSON.parse(e.data));\n              }\n          }\n      },\n      join() {\n          if(!this.account) return;\n          this.isJoin = true;\n          window.sessionStorage.account = this.account;\n          socket.emit('join', {account: this.account, roomid: this.roomid})\n      },\n      apply(account) {\n          this.loading = true;\n          this.loadingText = '呼叫中';\n          socket.emit('apply', {account, self: this.account})\n      }\n  }\n}\n",{"version":3,"sources":["Room.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"Room.vue","sourceRoot":"src/views","sourcesContent":["<!--\n * @Version: 2.0\n * @Autor: xieyan\n * @Date: 2021-06-12 17:39:07\n * @LastEditors: xieyan\n * @LastEditTime: 2021-06-16 20:02:14\n-->\n<template>\n  <div class=\"remote1\"\n    v-loading=\"loading\"\n    :element-loading-text=\"loadingText\"\n    element-loading-spinner=\"el-icon-loading\"\n    element-loading-background=\"rgba(0, 0, 0 , 0.7)\"\n  >\n    <div class=\"shade\" v-if=\"!isJoin\">\n        <div class=\"input-container\">\n            <el-input class=\"input-account\" type=\"text\" size=\"middle\" v-model=\"account\" placeholder=\"请输入昵称\" keyup.enter=\"join\"></el-input>\n            <el-button size=\"middle\"  @click=\"join\">确定</el-button>\n        </div>\n    </div>\n    <div class=\"userList\">\n        <h5>在线用户: {{userList.length}}</h5>\n        <p v-for=\"v in userList\" :key=\"v.count\">\n            {{v.account}}\n            <i v-if=\"v.account === account || v.account === isCall\">\n                {{v.account === account ? 'me' : ''}}\n                {{v.account === isCall ? 'calling': ''}}\n            </i>\n            <span @click=\"apply(v.account)\" v-if=\"v.account !== account && v.account !== isCall\">呼叫{{v.account}}</span>\n        </p>\n    </div>\n    <div class=\"video-container\">\n        <div>\n            <ul>\n                <li v-for=\"v in handleList\" :key=\"v.type\">\n                    <el-color-picker v-model=\"color\" show-alpha v-if=\"v.type === 'color'\" @change=\"colorChange\" :disabled=\"!isToPeer\"></el-color-picker>\n                    <button :disabled=\"v.type === 'cancel' ? !isToPeer || allowCancel:\n                        v.type === 'go' ? !isToPeer || allowGo\n                        :!isToPeer\"\n                            @click=\"handleClick(v)\"\n                            v-if=\"!['color', 'lineWidth', 'polygon'].includes(v.type)\"\n                            :class=\"{active: currHandle === v.type}\"\n                    >\n                        {{v.name}}\n                </button>\n                    <el-popover\n                            placement=\"top\"\n                            width=\"400\"\n                            trigger=\"click\"\n                            v-if=\"v.type === 'polygon'\"\n                    >\n                        <el-input-number v-model=\"sides\" controls-position=\"right\" @change=\"sidesChange\" :min=\"3\" :max=\"10\"></el-input-number>\n                        <button slot=\"reference\" :disabled=\"!isToPeer\" @click=\"handleClick(v)\" :class=\"{active: currHandle === v.type}\">{{v.name}}</button>\n                    </el-popover>\n                    <el-popover\n                            placement=\"top\"\n                            width=\"400\"\n                            trigger=\"click\"\n                            v-if=\"v.type === 'lineWidth'\"\n                    >\n                        <el-slider v-model=\"lineWidth\" :max=20 @change=\"lineWidthChange\"></el-slider>\n                        <button slot=\"reference\" :disabled=\"!isToPeer\">{{v.name}} <i>{{lineWidth + 'px'}}</i></button>\n                    </el-popover>\n                </li>\n            </ul>\n            <div>\n                <h5>画板</h5>\n                <canvas width=\"400\" height=\"500\" ref=\"canvas\"></canvas>\n            </div>\n        </div>\n        <div>\n            <h5>聊天</h5>\n            <div class=\"chat\">\n                <div class=\"message\" v-for=\"(v, i) in messageList\" :key=\"i\">\n                    <p>\n                        {{v.account}} - {{v.time}}\n                    </p>\n                    <p class=\"mes\">{{v.mes}}</p>\n                </div>\n                <textarea v-model=\"sendText\"></textarea><br>\n                <button :disabled=\"!isToPeer\" @click=\"send(['text'])\">发送</button>\n            </div>\n        </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport socket from '../utils/socket';\nimport { Palette } from '../utils/palette';\nexport default {\n  name: 'palette',\n  data() {\n    return {\n        loading: false,\n        loadingText: '呼叫中',\n        roomid: 'palette',\n        isJoin: false,\n        account: window.sessionStorage.account || '',\n        isToPeer: false, // 是否立即建立P2P连接\n        // roomid:  window.sessionStorage.roomid || '',\n        userList: [],\n        isCall: false,\n        peer: null, \n        offerOption: {\n           offerToReceiveAudio: 1,\n           offerToReceiveVideo: 1 \n        },\n        handleList: [\n            {name: '圆', type: 'arc'},\n            {name: '线条', type: 'line'},\n            {name: '矩形', type: 'rect'},\n            {name: '多边形', type: 'polygon'},\n            {name: '橡皮擦', type: 'eraser'},\n            {name: '撤回', type: 'cancel'},\n            {name: '前进', type: 'go'},\n            {name: '清屏', type: 'clear'},\n            {name: '线宽', type: 'lineWidth'},\n            {name: '颜色', type: 'color'}\n        ],\n        color: 'rgba(19, 206, 102, 1)',\n        currHandle: 'line',\n        lineWidth: 5,\n        palette: null, // 画板\n        allowCancel: true,\n        allowGo: true,\n        sides: 3,\n        channel: null,\n        messageList: [],\n        sendText: ''\n    }\n  },\n  mounted() {\n      this.initSocket();\n      if(this.account){\n        this.join();\n      }\n  },\n  methods: {\n      sidesChange() {\n          this.palette.changeWay({sides: this.sides})\n      },\n      lineWidthChange() {\n        this.palette.changeWay({lineWidth: this.lineWidth})\n      },\n      initPalette(){\n          this.palette = new Palette(this.$refs['canvas'], {\n              drawColor: this.color,\n              drawType: this.currHandle,\n              lineWidth: this.lineWidth,\n              allowCallback: this.allowCallback,\n              moveCallback: this.moveCallback\n          })\n      },\n      handleClick(v){\n          if(['cancel', 'go', 'clear'].includes(v.type)){\n              this.moveCallback(v.type);\n              this.palette[v.type]();\n              return;\n          }\n          this.palette.changeWay({type: v.type});\n          if(['color', 'lineWidth'].includes(v.type)) return;\n          this.currHandle = v.type;\n      },\n      allowCallback(cancel, go) {\n          this.allowCancel = !cancel;\n          this.allowGo = !go\n      },\n      moveCallback(...arr){\n          this.send(arr)\n      },\n      formatTime(date) {\n          const hour = date.getHours();\n          const minute = date.getMinutes();\n          const second = date.getSeconds();\n          return [hour, minute, second].map(this.formatNumber).join(':')\n      },\n      formatNumber(n){\n        n = n.toString();\n        return n[1] ? n : '0' + n  \n      },\n      send(arr){\n          if(arr[0] === 'text'){\n              let params = {account: this.account, time: this.formatTime(new Date()), mes: this.sendText, type: 'text'};\n              this.channel.send(JSON.stringify(params));\n              this.messageList.push(params);\n              this.sendText = '';\n          } else {\n              this.channel.send(JSON.stringify(arr));\n          }\n      },\n      colorChange() {\n          this.palette.changeWay({color: this.color})\n      },\n      initSocket() {\n        socket.on('joined', data => {\n            console.log(data, 'data')\n            this.userList = data;\n        })\n        socket.on('reply', async(data) => {\n            this.loading = false;\n            switch (data.type) {\n                case '1': // 同意\n                    this.isCall = data.self;\n                    // 对方同意后创建自己的peer\n                    await this.createP2P(data);\n                    // 建立dataChannel\n                    await this.createDataChannel(data);\n                    // 给对方发送offer\n                    this.createOffer(data);\n                    break;\n                case '2': // 拒绝\n                    this.$message({\n                        message: '对方拒绝了你的请求',\n                        type: 'warning'\n                    })\n                    break;\n                case '3': // 正在通话中\n                    this.$message({\n                        message: '对方正在通话中方！',\n                        type: 'warning'\n                    })\n                    break;\n            }\n        })\n        socket.on('1v1ICE', (data) =>{ // 接收到 ICE\n            this.onIce(data);\n        });\n        socket.on('apply', data => {\n            if(this.isCall){\n                this.reply(data.self, '3');\n                return;\n            }\n            this.$confirm(data.self + '向你请求视频通话，是否同意？', '提示', {\n                confirmButtonText: '同意',\n                cancelButtonText: '拒绝',\n                type: 'warning'\n            }).then(async () => {\n                await this.createP2P(data);\n                await this.onDataChannel();\n                this.isCall = data.self;\n                this.reply(data.self, '1')\n            }).catch(() => {\n                this.reply(data.self, '2')\n            })\n        });\n        socket.on('1v1offer', data => {\n            this.onOffer(data)\n        })\n        socket.on('1v1answer', data => { // 接受到anser\n            this.onAnswer(data)\n        })\n      },\n      async onAnswer(data) {\n          try{\n              await this.peer.setRemoteDescription(data.sdp)\n          }catch(e){\n              console.log('onAnswer：', e)\n          }\n      },\n      async onOffer(data) { // 接收offer并发送方answer\n        try{\n            // 接收端设置远程offer描述\n            await this.peer.setRemoteDescription(data.sdp);\n            // 接收端创建answer\n            let answer = await this.peer.createAnswer();\n            // 接收端设置本地answer描述\n            await this.peer.setLocalDescription(answer);\n            // 给对方发送answer\n            socket.emit('1v1answer', {account: data.self, self: this.account, sdp: answer})\n        }catch(e){\n            console.log('onOffer： ', e)\n        }\n          \n      },\n      \n      async createOffer(data) {\n          try{\n              // 创建offer\n              let offer = await this.peer.createOffer(this.offerOption);\n              // 呼叫端设置本地offer描述\n              await this.peer.setLocalDescription(offer);\n              //给对方发送offer\n              socket.emit('1v1offer', {\n                  account: data.self,\n                  self: this.account, \n                  sdp: offer\n              })\n          }catch(e){\n              console.log('createoffer: ', e)\n          }\n      },\n\n      initPeer(data){\n          // 创建输出端PeerConnection\n          let PeerConnection =window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection;\n          this.peer = new PeerConnection();\n          this.peer.onicecandidate = (event) => {\n              if(event.candidate) {\n                  socket.emit('1v1ICE', {account: data.self, self: this.account, sdp: event.candidate});\n              }\n          }\n      },\n        async onIce(data) { // 接收ICE候选\n            try{\n                await this.peer.addIceCandidate(data.sdp); // 设置远程ICE\n            }catch(e){\n                console.log('onAnswer: ', e)\n            }\n        },\n      async createP2P(data) {\n          this.loading = true;\n          this.loadingtext = '正在建立通话连接';\n          await this.initPeer(data); // 获取到媒体流后，调用函数初始化RTCPeerConnection\n      },\n      reply(account, type){\n          socket.emit('reply', {account: account, self: this.account, type: type})\n      },\n      createDataChannel() {\n          try{\n              this.channel = this.peer.createDataChannel('messagechannel');\n              this.handleChannel(this.channel);\n          }catch(e){\n              console.log('createChannel：',e)\n          }\n      },\n      onDataChannel() {\n          this.peer.ondatachannel = (event) => {\n              this.channel = event.channel;\n              this.handleChannel(this.channel);\n          }\n      },\n      handleChannel(channel) {\n          channel.binaryType = 'arraybuffer';\n          channel.onopen = (event) => {\n              console.log('channel onopen', event)\n              this.isToPeer = true;\n              this.loading = false;\n              this.initPalette();\n          }\n          channel.onclose = function(event){\n              console.log('channel onclose', event);\n          }\n          channel.onmessage = (e) => {\n              if(Array.isArray(JSON.parse(e.data))){\n                  let [type, ...arr] = JSON.parse(e.data);\n                  this.palette[type](...arr);\n              } else {\n                  this.messageList.push(JSON.parse(e.data));\n              }\n          }\n      },\n      join() {\n          if(!this.account) return;\n          this.isJoin = true;\n          window.sessionStorage.account = this.account;\n          socket.emit('join', {account: this.account, roomid: this.roomid})\n      },\n      apply(account) {\n          this.loading = true;\n          this.loadingText = '呼叫中';\n          socket.emit('apply', {account, self: this.account})\n      }\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n.input-container{\n    width: 200px;\n    margin: auto;\n    display: inline-flex;\n}\n.input-account{\n    margin-right: 20px;\n}\n.remote1{\n        width: 100%;\n        height: 100%;\n        display: flex;\n        justify-content: flex-start;\n    }\n    .shade{\n        position: fixed;\n        width:100vw;\n        height: 100vh;\n        left: 0;\n        top:0;\n        z-index: 100;\n        background-color: rgba(0,0,0,0.9);\n        .input-container{\n            position: absolute;\n            left:50%;\n            top:30%;\n            transform: translate(-50%, 50%);\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            input{\n                margin: 0;\n            }\n        }\n    }\n    .userList{\n        border: 1px solid #ddd;\n        margin-right: 50px;\n        min-width: 100px;\n        h5{\n            text-align: left;\n            margin-bottom: 5px;\n        }\n        p{\n            border-bottom: 1px solid #ddd;\n            line-height: 32px;\n            width:200px;\n            position: relative;\n            overflow: hidden;\n            cursor: pointer;\n            span{\n                position: absolute;\n                left:0;\n                top:100%;\n                background-color: #1fbeca;\n                color: #fff;\n                height: 100%;\n                transition: top 0.2s;\n                display: block;\n                width: 100%;\n            }\n            i{\n                font-style: normal;\n                font-size: 11px;\n                border: 1px solid #1fbeca;\n                color: #27cac7;\n                border-radius: 2px;\n                line-height: 1;\n                display: block;\n                position: absolute;\n                padding: 1px 2px;\n                right: 5px;\n                top: 5px;\n            }\n        }\n        p:last-child{\n            border-bottom: none;\n        }\n        p:hover span{\n            top:0;\n        }\n    }\n    ul{\n        text-decoration: none!important;\n        list-style-type: none;\n        margin-top: 60px;\n        li{\n            margin-bottom: 10px;\n        }\n    }\n    .video-container{\n        display: flex;\n        justify-content: center;\n        >div:first-child{\n            display: flex;\n            justify-content: flex-start;\n            margin-right: 50px;\n            canvas{\n                border: 1px solid #000;\n            }\n            ul{\n                text-align: left;\n            }\n        }\n        >div:last-child{\n            .chat{\n                width:500px;\n                height: 260px;\n                border: 1px solid #000;\n                text-align: left;\n                padding: 5px;\n                box-sizing: border-box;\n                .mes{\n                    font-size: 14px;\n                }\n            }\n            textarea{\n                width:400px;\n                height: 60px;\n                resize: none;\n            }\n        }\n    }\n</style>\n"]}]}