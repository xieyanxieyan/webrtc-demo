{"remainingRequest":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/koolearn/Downloads/webrtc-demo/webrtc-main/src/views/Home.vue?vue&type=style&index=0&id=fae5bece&scoped=true&lang=scss&","dependencies":[{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/src/views/Home.vue","mtime":1623914755685},{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.many{\n    text-align: center;\n}\n.btn{\n    margin-top: 20px;\n}\n.center{\n    width:500px;\n    height: 400px;\n    position: absolute;\n    left:0;\n    top:0;\n    bottom:0;\n    right:0;\n    margin: auto;\n}\n",{"version":3,"sources":["Home.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Home.vue","sourceRoot":"src/views","sourcesContent":["<!--\n * @Version: 2.0\n * @Autor: xieyan\n * @Date: 2021-06-12 17:10:35\n * @LastEditors: xieyan\n * @LastEditTime: 2021-06-17 15:25:55\n-->\n<template>\n  <div class=\"room\">\n      <div class=\"video-box\" ref=\"video-box\">\n          <video autoplay controls class=\"video-mine\" ref=\"video-mine\"></video>\n      </div>\n  </div>\n</template>\n\n<script>\nimport socket from '../utils/socket';\nexport default {\n    name: 'home',\n  data() {\n    return {\n        roomid: '',\n        peer: null,\n        peerList: {},\n        candidate: null,\n        localStream: null,\n    }\n  },\n  watch: {\n      userList: {\n          handler(){},\n          deep: true\n      }\n  },\n  beforeDestroy(){\n      for (let k in this.peerList){\n          this.peerList[k].close();\n          this.peerList[k] = null;\n      }\n  },\n  mounted(){\n      console.log(this.$route.params, 'params---->')\n      this.$nextTick(() => {\n          this.getUserMedia().then(() => {\n              socket.emit('join', {roomid: this.$route.params.roomid, account: this.$route.params.account})\n          })\n          this.socketInit();\n      })\n  },\n  methods: {\n      getUserMedia() {\n            let myVideo = this.$refs['video-mine'];\n                let getUserMedia = (navigator.getUserMedia ||\n                    navigator.webkitGetUserMedia ||\n                    navigator.mozGetUserMedia ||\n                    navigator.msGetUserMedia);\n          // 获取本地的媒体流，并绑定到一个video标签上输出，并且发送这个媒体流给其他客户端\n          return new Promise((resolve, reject) => {\n              getUserMedia.call(navigator, {\n                  \"audio\": true,\n                  \"video\": true\n              }, (stream) => {\n                  myVideo.srcObject = stream;\n                  this.localStream = stream;\n                  resolve()\n              }, function (error) {\n                  reject(error)\n              })\n          })\n      },\n      socketInit() {\n          socket.on('joined', (data, account) => {\n              console.log(data, account, '====>')\n              if(data.length > 1) {\n                  data.forEach(v => {\n                      let obj = {};\n                      let arr = [v.account, this.$route.params.account];\n                      obj.account = arr.sort().join('-');\n                      if(!this.peerList[obj.account] && v.account !== this.$route.params.account) {\n                          this.getPeerConnection(obj)\n                      }\n                  });\n                  if(account === this.$route.params.account) {\n                      for(let k in this.peerList){\n                          this.createOffer(k, this.peerList[k]);\n                      }\n                  }\n              }\n          })\n          socket.on('offer', v=> {\n              this.peerList[v.account] && this.peerList[v.account].setRemoteDescription(v.sdp, () => {\n                  this.peerList[v.account].createAnswer().then((desc) => {\n                      this.peerList[v.account].setLocalDescription(desc, () => {\n                          socket.emit('answer', {'sdp': this.peerList[v.account].localDescription, roomid: this.$route.params.roomid, account: v.account})\n                      })\n                  })\n              }, (err) => {\n                  console.log(err)\n              })\n          })\n          socket.on('answer', v=> {\n              console.log('answer---', v.sdp);\n              this.peerList[v.account] && this.peerList[v.account].setRemoteDescription(v.sdp, function() {}, (err) => {\n                  console.log(err)\n              })\n          })\n          socket.on('__ice_candidate', v=> {\n              if(v.candidate){\n                  this.peerList[v.account] && this.peerList[v.account].addIceCandidate(v.candidate).catch(() => {})\n              }\n          })\n          socket.on('disconnected', id => {\n              let dom = document.querySelector('#' + id);\n              if(dom){\n                  dom.remove();\n              }\n          })\n      },\n      getPeerConnection(v) {\n          let videoBox = this.$refs['video-box'];\n          let iceServer = {\n              \"iceServers\": [\n                  {\n                      \"url\": \"stun:stun.l.google.com:19302\"\n                  }\n              ]\n          }\n        let PeerConnection = (window.RTCPeerConnection ||\n        window.webkitRTCPeerConnection ||\n        window.mozRTCPeerConnection);\n          let peer = new PeerConnection(iceServer);\n          peer.addStream(this.localStram);\n          peer.onaddstream = function (event) {\n              let videos = document.querySelector('#'+v.account);\n              if(videos){\n                videos.srcObject = event.stream;\n              } else {\n                let video = document.createElement('video');\n                video.controls = true;\n                video.autoplay = 'autoplay';\n                video.srcObject = event.stream;\n                video.id = v.account;\n                videoBox.append(video)\n              }\n          };\n          peer.onicecandidate = (event) => {\n              if(event.candidate) {\n                  socket.emit('__ice_candidate', {\n                      'candidate': event.candidate, roomid: this.$route.params.roomid, account: v.account\n                  })\n              }\n          }\n          this.peerList[v.account] = peer;\n      },\n      createOffer(account, peer) {\n          peer.createOffer({\n              offerToRecieveAudio: 1,\n              offerToReceiveVideo: 1\n          }).then((desc) => {\n              peer.selLocalDescription(desc, () => {\n                  socket.emit('offer', {'sdp': peer.localDescription, roomid: this.$route.params.roomid, account: account})\n              })\n          })\n      },\n  },\n  components: {\n\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n    .many{\n        text-align: center;\n    }\n    .btn{\n        margin-top: 20px;\n    }\n    .center{\n        width:500px;\n        height: 400px;\n        position: absolute;\n        left:0;\n        top:0;\n        bottom:0;\n        right:0;\n        margin: auto;\n    }\n</style>\n"]}]}