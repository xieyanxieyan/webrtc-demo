{"remainingRequest":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/koolearn/Downloads/webrtc-demo/webrtc-main/src/views/Room.vue?vue&type=template&id=d59962d6&scoped=true&","dependencies":[{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/src/views/Room.vue","mtime":1623844934914},{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      directives: [\n        {\n          name: \"loading\",\n          rawName: \"v-loading\",\n          value: _vm.loading,\n          expression: \"loading\"\n        }\n      ],\n      staticClass: \"remote1\",\n      attrs: {\n        \"element-loading-text\": _vm.loadingText,\n        \"element-loading-spinner\": \"el-icon-loading\",\n        \"element-loading-background\": \"rgba(0, 0, 0 , 0.7)\"\n      }\n    },\n    [\n      !_vm.isJoin\n        ? _c(\"div\", { staticClass: \"shade\" }, [\n            _c(\n              \"div\",\n              { staticClass: \"input-container\" },\n              [\n                _c(\"el-input\", {\n                  staticClass: \"input-account\",\n                  attrs: {\n                    type: \"text\",\n                    size: \"middle\",\n                    placeholder: \"请输入昵称\",\n                    \"keyup.enter\": \"join\"\n                  },\n                  model: {\n                    value: _vm.account,\n                    callback: function($$v) {\n                      _vm.account = $$v\n                    },\n                    expression: \"account\"\n                  }\n                }),\n                _c(\n                  \"el-button\",\n                  { attrs: { size: \"middle\" }, on: { click: _vm.join } },\n                  [_vm._v(\"确定\")]\n                )\n              ],\n              1\n            )\n          ])\n        : _vm._e(),\n      _c(\n        \"div\",\n        { staticClass: \"userList\" },\n        [\n          _c(\"h5\", [_vm._v(\"在线用户: \" + _vm._s(_vm.userList.length))]),\n          _vm._l(_vm.userList, function(v) {\n            return _c(\"p\", { key: v.count }, [\n              _vm._v(\"\\n          \" + _vm._s(v.account) + \"\\n          \"),\n              v.account === _vm.account || v.account === _vm.isCall\n                ? _c(\"i\", [\n                    _vm._v(\n                      \"\\n              \" +\n                        _vm._s(v.account === _vm.account ? \"me\" : \"\") +\n                        \"\\n              \" +\n                        _vm._s(v.account === _vm.isCall ? \"calling\" : \"\") +\n                        \"\\n          \"\n                    )\n                  ])\n                : _vm._e(),\n              v.account !== _vm.account && v.account !== _vm.isCall\n                ? _c(\n                    \"span\",\n                    {\n                      on: {\n                        click: function($event) {\n                          return _vm.apply(v.account)\n                        }\n                      }\n                    },\n                    [_vm._v(\"呼叫\" + _vm._s(v.account))]\n                  )\n                : _vm._e()\n            ])\n          })\n        ],\n        2\n      ),\n      _c(\"div\", { staticClass: \"video-container\" }, [\n        _c(\"div\", [\n          _c(\n            \"ul\",\n            _vm._l(_vm.handleList, function(v) {\n              return _c(\n                \"li\",\n                { key: v.type },\n                [\n                  v.type === \"color\"\n                    ? _c(\"el-color-picker\", {\n                        attrs: { \"show-alpha\": \"\", disabled: !_vm.isToPeer },\n                        on: { change: _vm.colorChange },\n                        model: {\n                          value: _vm.color,\n                          callback: function($$v) {\n                            _vm.color = $$v\n                          },\n                          expression: \"color\"\n                        }\n                      })\n                    : _vm._e(),\n                  ![\"color\", \"lineWidth\", \"polygon\"].includes(v.type)\n                    ? _c(\n                        \"button\",\n                        {\n                          class: { active: _vm.currHandle === v.type },\n                          attrs: {\n                            disabled:\n                              v.type === \"cancel\"\n                                ? !_vm.isToPeer || _vm.allowCancel\n                                : v.type === \"go\"\n                                ? !_vm.isToPeer || _vm.allowGo\n                                : !_vm.isToPeer\n                          },\n                          on: {\n                            click: function($event) {\n                              return _vm.handleClick(v)\n                            }\n                          }\n                        },\n                        [\n                          _vm._v(\n                            \"\\n                      \" +\n                              _vm._s(v.name) +\n                              \"\\n              \"\n                          )\n                        ]\n                      )\n                    : _vm._e(),\n                  v.type === \"polygon\"\n                    ? _c(\n                        \"el-popover\",\n                        {\n                          attrs: {\n                            placement: \"top\",\n                            width: \"400\",\n                            trigger: \"click\"\n                          }\n                        },\n                        [\n                          _c(\"el-input-number\", {\n                            attrs: {\n                              \"controls-position\": \"right\",\n                              min: 3,\n                              max: 10\n                            },\n                            on: { change: _vm.sidesChange },\n                            model: {\n                              value: _vm.sides,\n                              callback: function($$v) {\n                                _vm.sides = $$v\n                              },\n                              expression: \"sides\"\n                            }\n                          }),\n                          _c(\n                            \"button\",\n                            {\n                              class: { active: _vm.currHandle === v.type },\n                              attrs: {\n                                slot: \"reference\",\n                                disabled: !_vm.isToPeer\n                              },\n                              on: {\n                                click: function($event) {\n                                  return _vm.handleClick(v)\n                                }\n                              },\n                              slot: \"reference\"\n                            },\n                            [_vm._v(_vm._s(v.name))]\n                          )\n                        ],\n                        1\n                      )\n                    : _vm._e(),\n                  v.type === \"lineWidth\"\n                    ? _c(\n                        \"el-popover\",\n                        {\n                          attrs: {\n                            placement: \"top\",\n                            width: \"400\",\n                            trigger: \"click\"\n                          }\n                        },\n                        [\n                          _c(\"el-slider\", {\n                            attrs: { max: 20 },\n                            on: { change: _vm.lineWidthChange },\n                            model: {\n                              value: _vm.lineWidth,\n                              callback: function($$v) {\n                                _vm.lineWidth = $$v\n                              },\n                              expression: \"lineWidth\"\n                            }\n                          }),\n                          _c(\n                            \"button\",\n                            {\n                              attrs: {\n                                slot: \"reference\",\n                                disabled: !_vm.isToPeer\n                              },\n                              slot: \"reference\"\n                            },\n                            [\n                              _vm._v(_vm._s(v.name) + \" \"),\n                              _c(\"i\", [_vm._v(_vm._s(_vm.lineWidth + \"px\"))])\n                            ]\n                          )\n                        ],\n                        1\n                      )\n                    : _vm._e()\n                ],\n                1\n              )\n            }),\n            0\n          ),\n          _c(\"div\", [\n            _c(\"h5\", [_vm._v(\"画板\")]),\n            _c(\"canvas\", {\n              ref: \"canvas\",\n              attrs: { width: \"400\", height: \"500\" }\n            })\n          ])\n        ]),\n        _c(\"div\", [\n          _c(\"h5\", [_vm._v(\"聊天\")]),\n          _c(\n            \"div\",\n            { staticClass: \"chat\" },\n            [\n              _vm._l(_vm.messageList, function(v, i) {\n                return _c(\"div\", { key: i, staticClass: \"message\" }, [\n                  _c(\"p\", [\n                    _vm._v(\n                      \"\\n                      \" +\n                        _vm._s(v.account) +\n                        \" - \" +\n                        _vm._s(v.time) +\n                        \"\\n                  \"\n                    )\n                  ]),\n                  _c(\"p\", { staticClass: \"mes\" }, [_vm._v(_vm._s(v.mes))])\n                ])\n              }),\n              _c(\"textarea\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.sendText,\n                    expression: \"sendText\"\n                  }\n                ],\n                domProps: { value: _vm.sendText },\n                on: {\n                  input: function($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.sendText = $event.target.value\n                  }\n                }\n              }),\n              _c(\"br\"),\n              _c(\n                \"button\",\n                {\n                  attrs: { disabled: !_vm.isToPeer },\n                  on: {\n                    click: function($event) {\n                      return _vm.send([\"text\"])\n                    }\n                  }\n                },\n                [_vm._v(\"发送\")]\n              )\n            ],\n            2\n          )\n        ])\n      ])\n    ]\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}