{"remainingRequest":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/thread-loader/dist/cjs.js!/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/babel-loader/lib/index.js!/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/koolearn/Downloads/webrtc-demo/webrtc-main/src/views/Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/src/views/Home.vue","mtime":1624023421729},{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport socket from '../utils/socket';\nexport default {\n  name: 'home',\n\n  data() {\n    return {\n      roomid: '',\n      peer: null,\n      peerList: {},\n      candidate: null,\n      localStream: null\n    };\n  },\n\n  watch: {\n    userList: {\n      handler() {},\n\n      deep: true\n    }\n  },\n\n  beforeDestroy() {\n    for (let k in this.peerList) {\n      this.peerList[k].close();\n      this.peerList[k] = null;\n    }\n  },\n\n  mounted() {\n    console.log(this.$route.params, 'params---->');\n    this.$nextTick(() => {\n      this.getUserMedia().then(() => {\n        socket.emit('join', {\n          roomid: this.$route.params.roomid,\n          account: this.$route.params.account\n        });\n      });\n      this.socketInit();\n    });\n  },\n\n  methods: {\n    getUserMedia() {\n      // 获取本地的媒体流，并绑定到一个video标签上输出，并且发送这个媒体流给其他客户端\n      return new Promise((resolve, reject) => {\n        let myVideo = this.$refs['video-mine'];\n        let getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;\n        console.log(getUserMedia, 'getUserMedia--->>');\n        getUserMedia.call(navigator, {\n          \"audio\": true,\n          \"video\": true\n        }, stream => {\n          myVideo.srcObject = stream;\n          this.localStream = stream;\n          resolve();\n        }, function (error) {\n          reject(error);\n        });\n      });\n    },\n\n    socketInit() {\n      socket.on('joined', (data, account) => {\n        if (data.length > 1) {\n          data.forEach(v => {\n            let obj = {};\n            let arr = [v.account, this.$route.params.account];\n            obj.account = arr.sort().join('-');\n\n            if (!this.peerList[obj.account] && v.account !== this.$route.params.account) {\n              this.getPeerConnection(obj);\n            }\n          });\n\n          if (account === this.$route.params.account) {\n            for (let k in this.peerList) {\n              this.createOffer(k, this.peerList[k]);\n            }\n          }\n        }\n      });\n      socket.on('offer', v => {\n        this.peerList[v.account] && this.peerList[v.account].setRemoteDescription(v.sdp, () => {\n          this.peerList[v.account].createAnswer().then(desc => {\n            this.peerList[v.account].setLocalDescription(desc, () => {\n              socket.emit('answer', {\n                'sdp': this.peerList[v.account].localDescription,\n                roomid: this.$route.params.roomid,\n                account: v.account\n              });\n            });\n          });\n        }, err => {\n          console.log(err);\n        });\n      });\n      socket.on('answer', v => {\n        this.peerList[v.account] && this.peerList[v.account].setRemoteDescription(v.sdp, function () {}, err => {\n          console.log(err);\n        });\n      });\n      socket.on('__ice_candidate', v => {\n        if (v.candidate) {\n          this.peerList[v.account] && this.peerList[v.account].addIceCandidate(v.candidate).catch(() => {});\n        }\n      });\n      socket.on('disconnected', id => {\n        let dom = document.querySelector('#' + id);\n\n        if (dom) {\n          dom.remove();\n        }\n      });\n    },\n\n    getPeerConnection(v) {\n      let videoBox = this.$refs['video-box'];\n      let iceServer = {\n        \"iceServers\": [{\n          \"url\": \"stun:stun.l.google.com:19302\"\n        }]\n      };\n      let PeerConnection = window.RTCPeerConnection || window.webkitRTCPeerConnection || window.mozRTCPeerConnection;\n      let peer = new PeerConnection(iceServer);\n      peer.addStream(this.localStream);\n\n      peer.onaddstream = function (event) {\n        let videos = document.querySelector('#a' + v.account);\n\n        if (videos) {\n          videos.srcObject = event.stream;\n        } else {\n          let video = document.createElement('video');\n          video.controls = true;\n          video.autoplay = 'autoplay';\n          video.srcObject = event.stream;\n          video.id = 'a' + v.account;\n          videoBox.append(video);\n        }\n      };\n\n      peer.onicecandidate = event => {\n        if (event.candidate) {\n          socket.emit('__ice_candidate', {\n            'candidate': event.candidate,\n            roomid: this.$route.params.roomid,\n            account: v.account\n          });\n        }\n      };\n\n      this.peerList[v.account] = peer;\n    },\n\n    createOffer(account, peer) {\n      peer.createOffer({\n        offerToRecieveAudio: 1,\n        offerToReceiveVideo: 1\n      }).then(desc => {\n        peer.setLocalDescription(desc, () => {\n          socket.emit('offer', {\n            'sdp': peer.localDescription,\n            roomid: this.$route.params.roomid,\n            account: account\n          });\n        });\n      });\n    }\n\n  },\n  components: {}\n};",null]}