{"remainingRequest":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/thread-loader/dist/cjs.js!/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/babel-loader/lib/index.js!/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/eslint-loader/index.js??ref--13-0!/Users/koolearn/Downloads/webrtc-demo/webrtc-main/src/utils/palette.js","dependencies":[{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/src/utils/palette.js","mtime":1623727827757},{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["/*\n * @Version: 2.0\n * @Autor: xieyan\n * @Date: 2021-06-14 16:53:31\n * @LastEditors: xieyan\n * @LastEditTime: 2021-06-15 11:18:51\n */\nclass Palette {\n  constructor(canvas, {\n    drawType = 'line',\n    drawColor = \"rgba(19, 206, 102,c1)\",\n    lineWidth = 5,\n    sides = 3,\n    allowCallback,\n    moveCallback\n  }) {\n    this.canvas = canvas;\n    this.width = canvas.width;\n    this.height = canvas.height;\n    this.paint = canvas.getContext('2d');\n    this.isClickCanvas = false; // 是否点击canvas\n\n    this.imgData = []; // 存储上一次的图像，用于撤回\n\n    this.isMoveCanvas = false; // 鼠标树否有移动\n\n    this.index = 0; // 记录当前显示的是第几帧\n\n    this.x = 0; // 鼠标按下是的x坐标\n\n    this.y = 0; // 鼠标按下是的y坐标\n\n    this.last = [this.x, this.y]; // 鼠标按下及每次移动后的坐标\n\n    this.drawType = drawType;\n    this.drawColor = drawColor;\n    this.lineWidth = lineWidth;\n    this.sides = sides; // 多边形边数\n\n    this.allowCallback = allowCallback || function () {}; // 允许操作的回调\n\n\n    this.moveCallback = moveCallback || function () {}; // 鼠标移动的回调\n\n\n    this.bindMousemove = function () {}; // \n\n\n    this.bindMousedown = function () {}; // 解决 eventlistener 不能bind\n\n\n    this.bindMouseup = function () {}; // 解决 eventlistener 不能bind\n\n\n    this.init();\n  }\n\n  init() {\n    this.paint.fillStyle = '#fff';\n    this.paint.fillRect(0, 0, this.width, this.height);\n    this.gatherImage();\n    this.bindMousemove = this.onmousemove.bind(this); // 解决 eventlistener 不能bind\n\n    this.bindMousedown = this.onmousedown.bind(this);\n    this.bindMouseup = this.onmouseup.bind(this);\n    this.canvas.addEventListener('mousedown', this.bindMousedown);\n    document.addEventListener('mouseup', this.bindMouseup);\n  }\n\n  onmouseup() {\n    if (this.isClickCanvas) {\n      this.isClickCanvas = false;\n      this.canvas.removeEventListener('mousemove', this.bindMousemove);\n\n      if (this.isMoveCanvas) {\n        this.isMoveCanvas = false;\n        this.moveCallback('gatherImage');\n        this.gatherImage();\n      }\n    }\n  }\n\n  onmousedown(e) {\n    this.isClickCanvas = true;\n    this.x = e.offsetX;\n    this.y = e.offsetY;\n    this.last = [this.x, this.y];\n    this.canvas.addEventListener('mousemove', this.bindMousemove);\n  }\n\n  onmousemove(e) {\n    this.isMoveCanvas = true;\n    this.endx = e.offsetX;\n    this.endy = e.offsetY;\n    let width = this.endx - this.x;\n    let height = this.endy - this.y;\n    let now = [this.endx, this.endy];\n\n    switch (this.drawType) {\n      case 'line':\n        {\n          let params = [this.last, now, this.lineWidth, this.drawColor];\n          this.moveCallback('line', ...params);\n          this.line(...params);\n        }\n        break;\n\n      case 'rect':\n        {\n          let params = [this.x, this.y, width, height, this.lineWidth, this.drawColor];\n          this.moveCallback('rect', params);\n          this.rect(...params);\n        }\n        break;\n\n      case 'polygon':\n        {\n          let params = [this.x, this.y, this.sides, width, height, this.lineWidth, this.drawColor];\n          this.moveCallback('polygon', ...params);\n          this.polygon(...params);\n        }\n        break;\n\n      case 'arc':\n        {\n          let params = [this.x, this.y, width, height, this.lineWidth, this.drawColor];\n          this.moveCallback('arc', ...params);\n          this.arc(...params);\n        }\n        break;\n\n      case 'eraser':\n        {\n          let params = [this.endx, this.endy, this.width, this.height, this.lineWidth];\n          this.moveCallback('eraser', ...params);\n          this.eraser(...params);\n        }\n        break;\n    }\n  }\n\n  gatherImage() {\n    this.imgData = this.imgData.slice(0, this.index + 1); // 每次鼠标抬起时，将储存的imgData截取至index处\n\n    let imgData = this.paint.getImageData(0, 0, this.width, this.height);\n    this.imgData.push(imgData);\n    this.index = this.imgData.length - 1; // 存储完后将index重置为imgData的最后一位\n\n    this.allowCallback(this.index > 0, this.index < this.imgData - 1);\n  }\n\n  line(last, now, lineWidth, drawColor) {\n    this.paint.beginPath();\n    this.paint.linCap = 'round'; // 设定线条与线条间接合处的样式\n\n    this.paint.lineJoin = 'round';\n    this.paint.lineWidth = lineWidth;\n    this.paint.strokeStyle = drawColor;\n    this.paint.moveTo(last[0], last[1]);\n    this.paint.lineTo(now[0], now[1]);\n    this.paint.closePath();\n    this.paint.stroke();\n    this.last = now;\n  }\n\n  rect(x, y, width, height, lineWidth, drawColor) {\n    this.reSetImage();\n    this.paint.lineWidth = lineWidth;\n    this.paint.stokeStyle = drawColor;\n    this.paint.strokeRect(x, y, width, height);\n  }\n\n  reSetImage() {\n    this.paint.clearRect(0, 0, this.width, this.height);\n\n    if (this.imgData.length >= 1) {\n      this.paint.putImageData(this.imgData[this.index], 0, 0);\n    }\n  }\n\n  polygon(x, y, sides, width, height, lineWidth, drawColor) {\n    this.reSetImage();\n    let n = sides;\n    let ran = 360 / n;\n    let rn = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));\n    this.paint.beginPath();\n    this.paint.strokeStyle = drawColor;\n    this.paint.lineWidth = lineWidth;\n\n    for (let i = 0; i < n; i++) {\n      this.paint.lineTo(x + Math.sin((i * ran + 45) * Math.PI / 180) * rn, y + Math.cos((i * ran + 45) * Math.PI / 180) * rn);\n    }\n\n    this.paint.closePath();\n    this.paint.stroke();\n  }\n\n  arc(x, y, width, height, lineWidth, drawColor) {\n    // 绘制圆形\n    this.reSetImage();\n    this.paint.beginPath();\n    this.paint.lineWidth = lineWidth;\n    let r = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));\n    this.paint.arc(x, y, r, 0, Math.PI * 2, false);\n    this.paint.strokeStyle = drawColor;\n    this.paint.closePath();\n    this.paint.stroke();\n  }\n\n  eraser(endx, endy, width, height, lineWidth) {\n    // 橡皮擦\n    this.paint.save();\n    this.paint.beginPath();\n    this.paint.arc(endx, endy, lineWidth / 2, 0, 2 * Math.PI);\n    this.paint.closePath();\n    this.paint.clip();\n    this.paint.clearRect(0, 0, width, height);\n    this.paint.fillStyle = '#fff';\n    this.paint.fillRect(0, 0, width, height);\n    this.paint.restore();\n  }\n\n  cancel() {\n    if (--this.index < 0) {\n      this.index = 0;\n      return;\n    }\n\n    this.allowCallback(this.index > 0, this.index < this.imgData.length - 1);\n    this.paint.putImageData(this.imgData[this.index], 0, 0);\n  }\n\n  go() {\n    // 前进\n    if (++this.index > this.imgData.length - 1) {\n      this.index = this.imgData.length - 1;\n      return;\n    }\n\n    this.allowCallback(this.index > 0, this.index < this.imgData.length - 1);\n    this.paint.putImageData(this.imgData[this.index], 0, 0);\n  }\n\n  clear() {\n    // 清屏\n    this.imgData = [];\n    this.paint.clearRect(0, 0, this.width, this.height);\n    this.paint.fillStyle = '#fff';\n    this.paint.fillRect(0, 0, this.width, this.height);\n    this.gatherImage();\n  }\n\n  changeWay({\n    type,\n    color,\n    lineWidth,\n    sides\n  }) {\n    // 绘制条件\n    this.drawType = type !== 'color' && type || this.drawType; // 绘制形状\n\n    this.drawColor = color || this.drawColor; // 绘制颜色\n\n    this.lineWidth = lineWidth || this.lineWidth; // 线宽\n\n    this.sides = sides || this.sides; // 边数\n  }\n\n  destroy() {\n    this.clear();\n    this.canvas.removeEventListener('mousedown', this.bindMousedown);\n    document.removeEventListener('mouseup', this.bindMouseup);\n    this.canvas = null;\n    this.paint = null;\n  }\n\n}\n\nexport { Palette };",null]}