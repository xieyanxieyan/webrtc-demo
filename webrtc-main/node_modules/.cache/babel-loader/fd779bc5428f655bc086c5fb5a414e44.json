{"remainingRequest":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/thread-loader/dist/cjs.js!/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/babel-loader/lib/index.js!/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/koolearn/Downloads/webrtc-demo/webrtc-main/src/views/Room.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/src/views/Room.vue","mtime":1624022339098},{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport socket from '../utils/socket';\nimport { Palette } from '../utils/palette';\nexport default {\n  name: 'palette',\n\n  data() {\n    return {\n      loading: false,\n      loadingText: '呼叫中',\n      roomid: 'palette',\n      isJoin: false,\n      account: window.sessionStorage.account || '',\n      isToPeer: false,\n      // 是否立即建立P2P连接\n      // roomid:  window.sessionStorage.roomid || '',\n      userList: [],\n      isCall: false,\n      peer: null,\n      offerOption: {\n        offerToReceiveAudio: 1,\n        offerToReceiveVideo: 1\n      },\n      handleList: [{\n        name: '圆',\n        type: 'arc'\n      }, {\n        name: '线条',\n        type: 'line'\n      }, {\n        name: '矩形',\n        type: 'rect'\n      }, {\n        name: '多边形',\n        type: 'polygon'\n      }, {\n        name: '橡皮擦',\n        type: 'eraser'\n      }, {\n        name: '撤回',\n        type: 'cancel'\n      }, {\n        name: '前进',\n        type: 'go'\n      }, {\n        name: '清屏',\n        type: 'clear'\n      }, {\n        name: '线宽',\n        type: 'lineWidth'\n      }, {\n        name: '颜色',\n        type: 'color'\n      }],\n      color: 'rgba(19, 206, 102, 1)',\n      currHandle: 'line',\n      lineWidth: 5,\n      palette: null,\n      // 画板\n      allowCancel: true,\n      allowGo: true,\n      sides: 3,\n      channel: null,\n      messageList: [],\n      sendText: ''\n    };\n  },\n\n  mounted() {\n    this.initSocket();\n\n    if (this.account) {\n      this.join();\n    }\n  },\n\n  methods: {\n    sidesChange() {\n      this.palette.changeWay({\n        sides: this.sides\n      });\n    },\n\n    lineWidthChange() {\n      this.palette.changeWay({\n        lineWidth: this.lineWidth\n      });\n    },\n\n    initPalette() {\n      this.palette = new Palette(this.$refs['canvas'], {\n        drawColor: this.color,\n        drawType: this.currHandle,\n        lineWidth: this.lineWidth,\n        allowCallback: this.allowCallback,\n        moveCallback: this.moveCallback\n      });\n    },\n\n    handleClick(v) {\n      if (['cancel', 'go', 'clear'].includes(v.type)) {\n        this.moveCallback(v.type);\n        this.palette[v.type]();\n        return;\n      }\n\n      this.palette.changeWay({\n        type: v.type\n      });\n      if (['color', 'lineWidth'].includes(v.type)) return;\n      this.currHandle = v.type;\n    },\n\n    allowCallback(cancel, go) {\n      this.allowCancel = !cancel;\n      this.allowGo = !go;\n    },\n\n    moveCallback(...arr) {\n      this.send(arr);\n    },\n\n    formatTime(date) {\n      const hour = date.getHours();\n      const minute = date.getMinutes();\n      const second = date.getSeconds();\n      return [hour, minute, second].map(this.formatNumber).join(':');\n    },\n\n    formatNumber(n) {\n      n = n.toString();\n      return n[1] ? n : '0' + n;\n    },\n\n    send(arr) {\n      if (arr[0] === 'text') {\n        let params = {\n          account: this.account,\n          time: this.formatTime(new Date()),\n          mes: this.sendText,\n          type: 'text'\n        };\n        this.channel.send(JSON.stringify(params));\n        this.messageList.push(params);\n        this.sendText = '';\n      } else {\n        this.channel.send(JSON.stringify(arr));\n      }\n    },\n\n    colorChange() {\n      this.palette.changeWay({\n        color: this.color\n      });\n    },\n\n    initSocket() {\n      socket.on('joined', data => {\n        this.userList = data;\n      });\n      socket.on('reply', async data => {\n        this.loading = false;\n\n        switch (data.type) {\n          case '1':\n            // 同意\n            this.isCall = data.self; // 对方同意后创建自己的peer\n\n            await this.createP2P(data); // 建立dataChannel\n\n            await this.createDataChannel(data); // 给对方发送offer\n\n            this.createOffer(data);\n            break;\n\n          case '2':\n            // 拒绝\n            this.$message({\n              message: '对方拒绝了你的请求',\n              type: 'warning'\n            });\n            break;\n\n          case '3':\n            // 正在通话中\n            this.$message({\n              message: '对方正在通话中！',\n              type: 'warning'\n            });\n            break;\n        }\n      });\n      socket.on('1v1ICE', data => {\n        // 接收到 ICE\n        this.onIce(data);\n      });\n      socket.on('apply', data => {\n        if (this.isCall) {\n          this.reply(data.self, '3');\n          return;\n        }\n\n        this.$confirm(data.self + '向你请求视频通话，是否同意？', '提示', {\n          confirmButtonText: '同意',\n          cancelButtonText: '拒绝',\n          type: 'warning'\n        }).then(async () => {\n          await this.createP2P(data);\n          console.log();\n          await this.onDataChannel();\n          this.isCall = data.self;\n          this.reply(data.self, '1');\n        }).catch(err => {\n          this.reply(data.self, '2');\n        });\n      });\n      socket.on('1v1offer', data => {\n        this.onOffer(data);\n      });\n      socket.on('1v1answer', data => {\n        // 接受到anser\n        this.onAnswer(data);\n      });\n    },\n\n    async onAnswer(data) {\n      try {\n        await this.peer.setRemoteDescription(data.sdp);\n      } catch (e) {\n        console.log('onAnswer：', e);\n      }\n    },\n\n    async onOffer(data) {\n      // 接收offer并发送方answer\n      try {\n        // 接收端设置远程offer描述\n        await this.peer.setRemoteDescription(data.sdp); // 接收端创建answer\n\n        let answer = await this.peer.createAnswer(); // 接收端设置本地answer描述\n\n        await this.peer.setLocalDescription(answer); // 给对方发送answer\n\n        socket.emit('1v1answer', {\n          account: data.self,\n          self: this.account,\n          sdp: answer\n        });\n      } catch (e) {\n        console.log('onOffer： ', e);\n      }\n    },\n\n    async createOffer(data) {\n      try {\n        // 创建offer\n        let offer = await this.peer.createOffer(this.offerOption); // 呼叫端设置本地offer描述\n\n        await this.peer.setLocalDescription(offer); //给对方发送offer\n\n        socket.emit('1v1offer', {\n          account: data.self,\n          self: this.account,\n          sdp: offer\n        });\n      } catch (e) {\n        console.log('createoffer: ', e);\n      }\n    },\n\n    initPeer(data) {\n      // 创建输出端PeerConnection\n      let PeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection;\n      this.peer = new PeerConnection();\n\n      this.peer.onicecandidate = event => {\n        if (event.candidate) {\n          socket.emit('1v1ICE', {\n            account: data.self,\n            self: this.account,\n            sdp: event.candidate\n          });\n        }\n      };\n    },\n\n    async onIce(data) {\n      // 接收ICE候选\n      try {\n        await this.peer.addIceCandidate(data.sdp); // 设置远程ICE\n      } catch (e) {\n        console.error('onAnswer: ', e);\n      }\n    },\n\n    async createP2P(data) {\n      this.loading = true;\n      this.loadingtext = '正在建立通话连接';\n      await this.initPeer(data); // 获取到媒体流后，调用函数初始化RTCPeerConnection\n    },\n\n    reply(account, type) {\n      socket.emit('reply', {\n        account: account,\n        self: this.account,\n        type: type\n      });\n    },\n\n    createDataChannel() {\n      console.log('createDataChannel----->>');\n\n      try {\n        this.channel = this.peer.createDataChannel('messagechannel');\n        this.handleChannel(this.channel);\n      } catch (e) {\n        console.log('createChannel：', e);\n      }\n    },\n\n    onDataChannel() {\n      this.peer.ondatachannel = event => {\n        this.channel = event.channel;\n        this.handleChannel(this.channel);\n      };\n    },\n\n    handleChannel(channel) {\n      console.log(channel, 'channel---->>');\n      channel.binaryType = 'arraybuffer';\n\n      channel.onopen = event => {\n        console.log('channel onopen', event);\n        this.loading = false;\n        this.isToPeer = true;\n        this.initPalette();\n      };\n\n      channel.onclose = function (event) {\n        console.log('channel onclose', event);\n      };\n\n      channel.onmessage = e => {\n        if (Array.isArray(JSON.parse(e.data))) {\n          let [type, ...arr] = JSON.parse(e.data);\n          this.palette[type](...arr);\n        } else {\n          this.messageList.push(JSON.parse(e.data));\n        }\n      };\n    },\n\n    join() {\n      if (!this.account) return;\n      this.isJoin = true;\n      window.sessionStorage.account = this.account;\n      socket.emit('join', {\n        account: this.account,\n        roomid: this.roomid\n      });\n    },\n\n    apply(account) {\n      this.loading = true;\n      this.loadingText = '呼叫中';\n      socket.emit('apply', {\n        account,\n        self: this.account\n      });\n    }\n\n  }\n};",null]}