{"remainingRequest":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/babel-loader/lib/index.js!/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/koolearn/Downloads/webrtc-demo/webrtc-main/src/views/Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/src/views/Home.vue","mtime":1623914755685},{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/koolearn/Downloads/webrtc-demo/webrtc-main/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport socket from '../utils/socket';\nexport default {\n  name: 'home',\n\n  data() {\n    return {\n      roomid: '',\n      peer: null,\n      peerList: {},\n      candidate: null,\n      localStream: null\n    };\n  },\n\n  watch: {\n    userList: {\n      handler() {},\n\n      deep: true\n    }\n  },\n\n  beforeDestroy() {\n    for (let k in this.peerList) {\n      this.peerList[k].close();\n      this.peerList[k] = null;\n    }\n  },\n\n  mounted() {\n    console.log(this.$route.params, 'params---->');\n    this.$nextTick(() => {\n      this.getUserMedia().then(() => {\n        socket.emit('join', {\n          roomid: this.$route.params.roomid,\n          account: this.$route.params.account\n        });\n      });\n      this.socketInit();\n    });\n  },\n\n  methods: {\n    getUserMedia() {\n      let myVideo = this.$refs['video-mine'];\n      let getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia; // 获取本地的媒体流，并绑定到一个video标签上输出，并且发送这个媒体流给其他客户端\n\n      return new Promise((resolve, reject) => {\n        getUserMedia.call(navigator, {\n          \"audio\": true,\n          \"video\": true\n        }, stream => {\n          myVideo.srcObject = stream;\n          this.localStream = stream;\n          resolve();\n        }, function (error) {\n          reject(error);\n        });\n      });\n    },\n\n    socketInit() {\n      socket.on('joined', (data, account) => {\n        console.log(data, account, '====>');\n\n        if (data.length > 1) {\n          data.forEach(v => {\n            let obj = {};\n            let arr = [v.account, this.$route.params.account];\n            obj.account = arr.sort().join('-');\n\n            if (!this.peerList[obj.account] && v.account !== this.$route.params.account) {\n              this.getPeerConnection(obj);\n            }\n          });\n\n          if (account === this.$route.params.account) {\n            for (let k in this.peerList) {\n              this.createOffer(k, this.peerList[k]);\n            }\n          }\n        }\n      });\n      socket.on('offer', v => {\n        this.peerList[v.account] && this.peerList[v.account].setRemoteDescription(v.sdp, () => {\n          this.peerList[v.account].createAnswer().then(desc => {\n            this.peerList[v.account].setLocalDescription(desc, () => {\n              socket.emit('answer', {\n                'sdp': this.peerList[v.account].localDescription,\n                roomid: this.$route.params.roomid,\n                account: v.account\n              });\n            });\n          });\n        }, err => {\n          console.log(err);\n        });\n      });\n      socket.on('answer', v => {\n        console.log('answer---', v.sdp);\n        this.peerList[v.account] && this.peerList[v.account].setRemoteDescription(v.sdp, function () {}, err => {\n          console.log(err);\n        });\n      });\n      socket.on('__ice_candidate', v => {\n        if (v.candidate) {\n          this.peerList[v.account] && this.peerList[v.account].addIceCandidate(v.candidate).catch(() => {});\n        }\n      });\n      socket.on('disconnected', id => {\n        let dom = document.querySelector('#' + id);\n\n        if (dom) {\n          dom.remove();\n        }\n      });\n    },\n\n    getPeerConnection(v) {\n      let videoBox = this.$refs['video-box'];\n      let iceServer = {\n        \"iceServers\": [{\n          \"url\": \"stun:stun.l.google.com:19302\"\n        }]\n      };\n      let PeerConnection = window.RTCPeerConnection || window.webkitRTCPeerConnection || window.mozRTCPeerConnection;\n      let peer = new PeerConnection(iceServer);\n      peer.addStream(this.localStram);\n\n      peer.onaddstream = function (event) {\n        let videos = document.querySelector('#' + v.account);\n\n        if (videos) {\n          videos.srcObject = event.stream;\n        } else {\n          let video = document.createElement('video');\n          video.controls = true;\n          video.autoplay = 'autoplay';\n          video.srcObject = event.stream;\n          video.id = v.account;\n          videoBox.append(video);\n        }\n      };\n\n      peer.onicecandidate = event => {\n        if (event.candidate) {\n          socket.emit('__ice_candidate', {\n            'candidate': event.candidate,\n            roomid: this.$route.params.roomid,\n            account: v.account\n          });\n        }\n      };\n\n      this.peerList[v.account] = peer;\n    },\n\n    createOffer(account, peer) {\n      peer.createOffer({\n        offerToRecieveAudio: 1,\n        offerToReceiveVideo: 1\n      }).then(desc => {\n        peer.selLocalDescription(desc, () => {\n          socket.emit('offer', {\n            'sdp': peer.localDescription,\n            roomid: this.$route.params.roomid,\n            account: account\n          });\n        });\n      });\n    }\n\n  },\n  components: {}\n};",{"version":3,"sources":["Home.vue"],"names":[],"mappings":"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","sourcesContent":["<!--\n * @Version: 2.0\n * @Autor: xieyan\n * @Date: 2021-06-12 17:10:35\n * @LastEditors: xieyan\n * @LastEditTime: 2021-06-17 15:25:55\n-->\n<template>\n  <div class=\"room\">\n      <div class=\"video-box\" ref=\"video-box\">\n          <video autoplay controls class=\"video-mine\" ref=\"video-mine\"></video>\n      </div>\n  </div>\n</template>\n\n<script>\nimport socket from '../utils/socket';\nexport default {\n    name: 'home',\n  data() {\n    return {\n        roomid: '',\n        peer: null,\n        peerList: {},\n        candidate: null,\n        localStream: null,\n    }\n  },\n  watch: {\n      userList: {\n          handler(){},\n          deep: true\n      }\n  },\n  beforeDestroy(){\n      for (let k in this.peerList){\n          this.peerList[k].close();\n          this.peerList[k] = null;\n      }\n  },\n  mounted(){\n      console.log(this.$route.params, 'params---->')\n      this.$nextTick(() => {\n          this.getUserMedia().then(() => {\n              socket.emit('join', {roomid: this.$route.params.roomid, account: this.$route.params.account})\n          })\n          this.socketInit();\n      })\n  },\n  methods: {\n      getUserMedia() {\n            let myVideo = this.$refs['video-mine'];\n                let getUserMedia = (navigator.getUserMedia ||\n                    navigator.webkitGetUserMedia ||\n                    navigator.mozGetUserMedia ||\n                    navigator.msGetUserMedia);\n          // 获取本地的媒体流，并绑定到一个video标签上输出，并且发送这个媒体流给其他客户端\n          return new Promise((resolve, reject) => {\n              getUserMedia.call(navigator, {\n                  \"audio\": true,\n                  \"video\": true\n              }, (stream) => {\n                  myVideo.srcObject = stream;\n                  this.localStream = stream;\n                  resolve()\n              }, function (error) {\n                  reject(error)\n              })\n          })\n      },\n      socketInit() {\n          socket.on('joined', (data, account) => {\n              console.log(data, account, '====>')\n              if(data.length > 1) {\n                  data.forEach(v => {\n                      let obj = {};\n                      let arr = [v.account, this.$route.params.account];\n                      obj.account = arr.sort().join('-');\n                      if(!this.peerList[obj.account] && v.account !== this.$route.params.account) {\n                          this.getPeerConnection(obj)\n                      }\n                  });\n                  if(account === this.$route.params.account) {\n                      for(let k in this.peerList){\n                          this.createOffer(k, this.peerList[k]);\n                      }\n                  }\n              }\n          })\n          socket.on('offer', v=> {\n              this.peerList[v.account] && this.peerList[v.account].setRemoteDescription(v.sdp, () => {\n                  this.peerList[v.account].createAnswer().then((desc) => {\n                      this.peerList[v.account].setLocalDescription(desc, () => {\n                          socket.emit('answer', {'sdp': this.peerList[v.account].localDescription, roomid: this.$route.params.roomid, account: v.account})\n                      })\n                  })\n              }, (err) => {\n                  console.log(err)\n              })\n          })\n          socket.on('answer', v=> {\n              console.log('answer---', v.sdp);\n              this.peerList[v.account] && this.peerList[v.account].setRemoteDescription(v.sdp, function() {}, (err) => {\n                  console.log(err)\n              })\n          })\n          socket.on('__ice_candidate', v=> {\n              if(v.candidate){\n                  this.peerList[v.account] && this.peerList[v.account].addIceCandidate(v.candidate).catch(() => {})\n              }\n          })\n          socket.on('disconnected', id => {\n              let dom = document.querySelector('#' + id);\n              if(dom){\n                  dom.remove();\n              }\n          })\n      },\n      getPeerConnection(v) {\n          let videoBox = this.$refs['video-box'];\n          let iceServer = {\n              \"iceServers\": [\n                  {\n                      \"url\": \"stun:stun.l.google.com:19302\"\n                  }\n              ]\n          }\n        let PeerConnection = (window.RTCPeerConnection ||\n        window.webkitRTCPeerConnection ||\n        window.mozRTCPeerConnection);\n          let peer = new PeerConnection(iceServer);\n          peer.addStream(this.localStram);\n          peer.onaddstream = function (event) {\n              let videos = document.querySelector('#'+v.account);\n              if(videos){\n                videos.srcObject = event.stream;\n              } else {\n                let video = document.createElement('video');\n                video.controls = true;\n                video.autoplay = 'autoplay';\n                video.srcObject = event.stream;\n                video.id = v.account;\n                videoBox.append(video)\n              }\n          };\n          peer.onicecandidate = (event) => {\n              if(event.candidate) {\n                  socket.emit('__ice_candidate', {\n                      'candidate': event.candidate, roomid: this.$route.params.roomid, account: v.account\n                  })\n              }\n          }\n          this.peerList[v.account] = peer;\n      },\n      createOffer(account, peer) {\n          peer.createOffer({\n              offerToRecieveAudio: 1,\n              offerToReceiveVideo: 1\n          }).then((desc) => {\n              peer.selLocalDescription(desc, () => {\n                  socket.emit('offer', {'sdp': peer.localDescription, roomid: this.$route.params.roomid, account: account})\n              })\n          })\n      },\n  },\n  components: {\n\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n    .many{\n        text-align: center;\n    }\n    .btn{\n        margin-top: 20px;\n    }\n    .center{\n        width:500px;\n        height: 400px;\n        position: absolute;\n        left:0;\n        top:0;\n        bottom:0;\n        right:0;\n        margin: auto;\n    }\n</style>\n"],"sourceRoot":"src/views"}]}